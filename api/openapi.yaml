openapi: 3.1.0
info:
  title: Retail Hub â€” Orders API
  version: 1.0.0
  description: |
    Order lifecycle management: create from cart, retrieve by ID, list user orders, cancel before capture.
    On create, the service reserves inventory in Catalog and initiates a payment intent in Payments.
  x-implementation-language: java
servers:
  - url: https://api.retail-hub.com/v1/orders
  - url: http://localhost:{port}/v1/orders
    variables: { port: { default: "8083" } }
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
tags:
  - name: Orders
  - name: Health
security:
  - bearerAuth: []
  - cookieAuth: []
paths:
  /:
    post:
      tags: [Orders]
      summary: Create order from current cart
      operationId: createOrder
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/XRequestId'
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201':
          description: Order created
          headers: { Location: { schema: { type: string } }, X-Request-Id: { $ref: '#/components/headers/XRequestId' } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
        '409':
          description: Cart empty or inventory conflict
          content: { application/json: { schema: { $ref: '#/components/schemas/Problem' } } }
        '400': { $ref: '#/components/responses/BadRequest' }
    get:
      tags: [Orders]
      summary: List my orders
      operationId: listOrders
      parameters:
        - name: status
          in: query
          schema: { $ref: '#/components/schemas/OrderStatus' }
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: size
          in: query
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          description: Paginated orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Order' }
                  page: { type: integer }
                  size: { type: integer }
                  total: { type: integer }
  /{orderId}:
    get:
      tags: [Orders]
      summary: Get order by ID
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200': { description: Order, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
  /{orderId}/cancel:
    post:
      tags: [Orders]
      summary: Cancel an order before capture
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/XRequestId'
      responses:
        '200':
          description: Cancelled
          content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } }
        '409':
          description: Cannot cancel (already paid or shipped)
          content: { application/json: { schema: { $ref: '#/components/schemas/Problem' } } }
        '404': { $ref: '#/components/responses/NotFound' }

  # Internal callback consumed by Payments (secured by network/WAF/policy)
  /_internal/payments/callback:
    post:
      tags: [Orders]
      summary: Payment result callback
      description: Internal endpoint for Payments to confirm authorization/capture.
      operationId: paymentCallback
      security: []  # Typically protected by network ACLs/WAF/shared secret header
      parameters:
        - name: X-Payments-Signature
          in: header
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCallback' }
      responses:
        '204': { description: Acknowledged }

  /healthz:
    get:
      tags: [Health]
      summary: Liveness
      security: []
      responses: { '200': { description: OK } }
  /readyz:
    get:
      tags: [Health]
      summary: Readiness
      security: []
      responses:
        '200': { description: Ready }
        '503': { description: Not ready }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }
    cookieAuth: { type: apiKey, in: cookie, name: rh_session }
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      schema: { type: string, maxLength: 128 }
    XRequestId:
      name: X-Request-Id
      in: header
      schema: { type: string }
  headers:
    XRequestId: { schema: { type: string } }
  responses:
    BadRequest:
      description: Bad request
      content: { application/json: { schema: { $ref: '#/components/schemas/Problem' } } }
    NotFound:
      description: Not found
      content: { application/json: { schema: { $ref: '#/components/schemas/Problem' } } }
  schemas:
    OrderStatus:
      type: string
      enum: [pending_payment, paid, cancelled, failed]
    Address:
      type: object
      properties:
        line1: { type: string, maxLength: 200 }
        line2: { type: string, maxLength: 200 }
        city: { type: string, maxLength: 100 }
        state: { type: string, maxLength: 100 }
        postalCode: { type: string, maxLength: 20 }
        country: { type: string, maxLength: 2 }
    OrderCreate:
      type: object
      additionalProperties: false
      properties:
        shippingAddress: { $ref: '#/components/schemas/Address' }
        notes: { type: string, maxLength: 1000 }
    OrderItem:
      type: object
      required: [productId, name, qty, unitPriceCents]
      properties:
        productId: { type: string, format: uuid }
        name: { type: string, maxLength: 200 }
        qty: { type: integer, minimum: 1 }
        unitPriceCents: { type: integer, minimum: 0 }
        lineTotalCents: { type: integer, minimum: 0 }
    Order:
      type: object
      required: [id, status, currency, items, subtotalCents, totalCents, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid }
        status: { $ref: '#/components/schemas/OrderStatus' }
        currency: { type: string, pattern: '^[A-Z]{3}$', example: USD }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        subtotalCents: { type: integer, minimum: 0 }
        totalCents: { type: integer, minimum: 0 }
        shippingAddress: { $ref: '#/components/schemas/Address' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        paymentIntentId: { type: string, format: uuid }
    PaymentCallback:
      type: object
      required: [orderId, paymentIntentId, status]
      properties:
        orderId: { type: string, format: uuid }
        paymentIntentId: { type: string, format: uuid }
        status: { type: string, enum: [authorized, captured, failed] }
        failureReason: { type: string }
    Problem:
      type: object
      required: [title, status]
      properties:
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        type: { type: string, format: uri }
